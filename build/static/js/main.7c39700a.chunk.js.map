{"version":3,"sources":["logo.svg","ShowTime.js","serviceWorker.js","ToDoList/ToDoInput.js","ToDoList/ToDoing.js","ToDoList/ToDoList.js","index.js"],"names":["module","exports","Component","Boolean","window","location","hostname","match","ToDoInput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","this","refs","focus","ref","onChange","onKeyDown","type","inp","onClick","ToDoing","todo","map","item","index","key","del","defaultProps","ToDoList","addItem","data","delItem","splice","obj","o","Object","assign","keys","forEach","ReactDOM","render","document","getElementById","className","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c39700a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React,{Fragment,Component} from 'react';\r\nimport './index.css';\r\nimport { setTimeout } from 'timers';\r\n\r\n//类定义组件\r\nexport default class ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time:new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        console.log('constructor');\r\n        // console.log(props);\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a > 10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log('didupdate');\r\n        console.log(preState);\r\n        console.log(this.state.time);\r\n\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n        return {name:this.state.a};\r\n    }\r\n    componentDidMount(){\r\n        console.log('didmount');\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        var {name,age} = this.props;\r\n        return (<Fragment>\r\n                    {/* 条件渲染 */}\r\n                    {name.length > 5?<div>姓名:{name}</div>:''}\r\n                    {name.length > 5&&<div>姓名:{name}</div>}\r\n                    \r\n                    <div>{this.state.time}</div>\r\n                    <div>年龄:{age}</div>\r\n                    {/*循环渲染 */}\r\n                    <div>\r\n                        {\r\n                            age.map((item,index)=>{\r\n                                if(index%2 == 0){\r\n                                    return <p key={item}>{item}</p>\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Fragment>\r\n            )\r\n    }\r\n}\r\n\r\n//默认导出：一个文件只能默认导出一次，被引入时可以重命名\r\n//export default ShowTime;\r\n\r\n// 命名导出：可以导出多个，被引入时与导出的名一致\r\n// export {ShowTime};\r\n// export const num = 100;\r\n// export const num1 = 100;\r\n// export const num2 = 100;\r\n// export const num3 = 100;\r\n// export const num4 = 100;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值(表单验证)/写法相对麻烦\r\n//\r\nexport default class ToDoInput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n    handleInput = (e) =>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value === ''?0:e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this);\r\n        // this.a.focus();\r\n        this.refs.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <input ref={(inp)=>{this.a=inp}} name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"></input>+ */}\r\n                <input ref='a' name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"></input>+\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"></input>+\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"></input>=\r\n                {/* <p>{parseInt(this.state.a===''?0:this.state.a)+parseInt(this.state.b===''?0:this.state.b)+parseInt(this.state.c===''?0:this.state.c)}</p> */}\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/* 非受控组件:一次性获取或处理表单元素的值*/}\r\n                <input type='text' ref={(inp)=>{this.inp=inp}}></input>\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n                {/* <button onClick={()=>{console.log(this.state.inputValue)}}>提交</button> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// 受控组件：(1、2必须写)\r\n// 1、给input标签添加value属性，赋值为state的值\r\n// 2、给input标签绑定onChange事件，\r\n// 在事件处理函数中setState\r\n// 3、一个事件处理函数控制多个表单元素时，\r\n// 给input标签加上name属性,事件处理函数中写：\r\n// setState({[e.target.name]:e.target.value})","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class ToDoing extends Component {\r\n    // delItem = (index,e) =>{\r\n    //     console.log(e);\r\n    //     this.props.del(index);\r\n    // }\r\n\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {\r\n                        todo.map((item,index)=>{\r\n                            // return <li key={index}>{item}---<button onClick={this.delItem.bind(this,index)}>删除</button></li>\r\n                            return <li key={index}>{item}---<button onClick={(e)=>this.props.del(index,e)}>删除</button></li>\r\n                        })\r\n                        // 如果只有一个元素的话todo.map(item=><li>{item}</li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//使用PropTypes进行类型检查\r\nToDoing.propTypes = {\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\n//使用defaultProps设置默认值\r\nToDoing.defaultProps = {\r\n    todo:[1,2,3,4,4]\r\n}","import React, { Component } from 'react'\r\nimport ToDoInput from './ToDoInput'\r\nimport ToDoing from './ToDoing'\r\n\r\nexport default class ToDoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3]\r\n        }\r\n\r\n        //深拷贝\\浅拷贝\r\n        var obj = {a:100,b:[1,2,3]};\r\n        var obj1 = {c:300};\r\n        // var o ={obj} ;//200\r\n        // var o ={...obj} ;\r\n        var o = Object.assign({},obj,obj1);//深拷贝\r\n        // var o =JSON.parse(JSON.stringify(obj));//深拷贝最简单的一种方法\r\n        // o.b[0] = 200;\r\n        console.log(o === obj);\r\n        //Object.keys(obj);//属性名组成的数组\r\n        Object.keys(obj).forEach((item)=>{//遍历数组，前面是属性后面是索引\r\n            console.log(item);\r\n            console.log(obj[item]);\r\n\r\n        });//属性名组成的数组\r\n    }\r\n    addItem = (data) =>{\r\n        // this.state.todo.push(data);\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (index,e) =>{\r\n         //1、不能直接改变或处理state,通过setState改变\r\n         \r\n        let todo = [...this.state.todo];\r\n        todo.splice(index,1);\r\n        //2、setState是异步执行的\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return {\r\n                todo:todo\r\n            }\r\n        })\r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n        // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n        //     todo:this.stste.num + 100\r\n        // },()=>{\r\n        //     console.log(this.state.todo);\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ToDoInput add={this.addItem}/>\r\n                <ToDoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Fragment,Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ShowTime from './ShowTime';//引js不用加后缀名，如果是命名导出则{ShowTime}\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ToDoList from './ToDoList/ToDoList';\r\n\r\n//函数声明组件\r\n// function ShowTime(props){\r\n//     console.log(props);\r\n//     return (<Fragment>\r\n//                 <div>{props.name}{props.age}</div>\r\n//                 <div>{new Date().toLocaleString()}</div>\r\n//             </Fragment>\r\n//            )\r\n// }\r\n\r\n\r\n//组件交互\r\n// 父组件--->子组件:调用子组件时添加属性,子组件通过props拿到传递的组件\r\n//子组件--->父组件：\r\n\r\nReactDOM.render(<ToDoList/>,document.getElementById('root'));\r\n\r\n\r\n\r\n// var num = [1,2,3,4,5];\r\n// ReactDOM.render(\r\n//     <ShowTime age={num} name=\"zhangsan\"/>,\r\n//     document.getElementById('root')\r\n// )\r\n\r\n\r\n\r\n// var num = 100;\r\n// ReactDOM.render(\r\n//     <ShowTime age={num} name=\"zhangsan\"/>,\r\n//     document.getElementById('root'))\r\n\r\n\r\n\r\n//显示当前系统时间\r\n// function showTime(){\r\n//     var ele = <div>{new Date().toLocaleString()}</div>;\r\n//     ReactDOM.render(ele,document.querySelector('#root'));\r\n// }\r\n// showTime();\r\n// setInterval(showTime,1000);\r\n\r\n\r\n\r\n//react技术栈\r\n//jsx语法\r\n// var str = 'react';\r\n// var ele = <h1 class=\"tit\">hello React {str} <p>react</p></h1>\r\n// babel编译，返回一个对象\r\n// var ele = React.createElement(\r\n//     'h1',\r\n//     {id:'tit',class:'title'},\r\n//     'hello',\r\n//     React.createElement(\r\n//         'p',\r\n//         {id:'t',class:'tit'},\r\n//         'react')\r\n// );\r\n// ReactDOM.render(ele, document.getElementById('root'));\r\n// 自己封装render函数\r\nvar obj = {\r\n    type:'div',\r\n    props:{\r\n        id:'box',\r\n        class:'box',\r\n        children:[\r\n            'hello',\r\n            'react',\r\n            {\r\n                type:'h1',\r\n                props:{\r\n                    id:'tit',\r\n                    class:'tit',\r\n                    children:[\r\n                        'title',\r\n                        'react'\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nfunction render(object,container){\r\n    var {type,props} = object;//解构赋值\r\n    //文档碎片\r\n    var fragment = document.createDocumentFragment();\r\n\r\n    var ele =  document.createElement(type);\r\n    for(var item in props){\r\n        if(item === 'class'){\r\n            ele.className = props[item];\r\n        }\r\n        else if(item === 'children'){\r\n            for(var i = 0;i < props.children.length;i ++){\r\n                // ele.innerHTML += props.children[i];\r\n                if(typeof props.children[i] === 'object'){\r\n                    render(props.children[i],ele);\r\n                }\r\n                else{\r\n                    var txt = document.createTextNode(props.children[i]);\r\n                    ele.appendChild(txt);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            ele[item] = props[item];\r\n        }\r\n        \r\n    }\r\n\r\n    fragment.appendChild(ele);\r\n    container.appendChild(fragment);\r\n    // container.appendChild(ele);\r\n\r\n    \r\n}\r\n// render(obj,document.getElementById('root'));\r\n//页面渲染过程\r\n//请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\r\n//link引入css文件、css解析器解析css、生成css对象模型，CSSOM和DOM tree结合生成一个render tree，最后浏览器绘制页面\r\n\r\n//页面回流(重排reflow):DOM结构变化，内容变化、大小、位置变化、显示变化都会引起页面回流\r\n//页面重绘(repaint):颜色的变化(背景色、字体颜色、边框颜色)\r\n//回流肯定会引起重绘\r\n\r\n//1、先用变量进行DOM处理，最后一次渲染\r\n// console.time('time');\r\n// var div = document.getElementById('root');\r\n// var str = '';\r\n// for(var i = 0;i < 1000; i ++){\r\n//     str += '<p>' + i + '</p>';\r\n// }\r\n// div.innerHTML = str;\r\n// console.timeEnd('time');\r\n\r\n\r\n//2、对于样式处理,声明一个css类\r\nvar div = document.getElementById('root');\r\n// div.style.width = '100px';\r\n// div.style.height = '100px';\r\n// div.style.background = 'red';\r\n\r\ndiv.className = 'active';\r\n\r\n//3、offsetLeft、offsetWidth等都会引起回流，要慎用\r\n// console.log(div.offsetLeft);\r\n// var wid = div.offsetWidth;\r\n// setInterval(() => {\r\n    // div.style.width = div.offsetWidth + 1 + 'px';\r\n\r\n//     wid += 1;\r\n//     div.style.width = wid + 'px';\r\n// },100)\r\n\r\n//4、文档碎片(内存中的一个变量)\r\n\r\n// var ele = React.createElement('h1',{id:'tit',class:'tit'},'hello',React.createElement('p',{id:'t',class:'t'},'react'));\r\n\r\n// console.log(ele);\r\n// ReactDOM.render(ele, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}